@{
    var errors = new ModelErrorCollection();
    var fieldValue = Array.Empty<string>();
    var modelState = (TempData["ModelState"]?.ToString() ?? string.Empty).DeserializeModelState();

    if (modelState.TryGetValue((string)Model.Name, out var fieldEntry))
    {
        errors = fieldEntry.Errors;
        fieldValue = fieldEntry.AttemptedValue?.Split(",", StringSplitOptions.RemoveEmptyEntries) ?? Array.Empty<string>();
    }
}

<div class="form-group">
    <label for="@Model.Name">
        @Model.Label @if (Model.Required)
        {<span class="required">*</span>}
    </label>

    @if (!string.IsNullOrEmpty(Model.Description))
    {
        <span id="@Model.Name-hint" class="hint">
            @Html.Raw(Model.Description)
        </span>
    }

    <div class="checkboxes">
        @for (var i = 0; i < Model.Values.Length; i++)
        {
        <div class="checkboxes__item">
            <input 
                class="checkboxes__input" 
                id="@Model.Name-@i" 
                name="@Model.Name" 
                type="checkbox"
                value="@Model.Values[i].Value"
                @if (fieldValue.Any(x => x.Equals(Model.Values[i].Value.ToString()))) { <text>checked</text> }
            />

            <label class="label checkboxes__label" for="@Model.Name-@i">
                @Model.Values[i].Label
            </label>
        </div>
        }
    </div>

    @foreach (var error in errors)
    {
        <div class="text--danger">@error.ErrorMessage</div>
    }
</div>